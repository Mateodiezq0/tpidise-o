@page "/Empleados/Ventas/ventasClientes"
@using Reciplas.Models;
@inject NotificationService NotificationService 
@inherits OwningComponentBase<Usuario>
@using System.Collections.Generic;    
@inject NavigationManager NavigationManager
@inject IJSRuntime iJSRuntime;  

<PageTitle>Areas</PageTitle>
<TituloPrincipal TextoPrincipal="Ventas" TextoSecundario="Clientes" />


<ErrorBoundary>

<CListado TItem="Models.Cliente" Data="@clientes">
       <Columns>
        <RadzenDataGridColumn TItem=" Models.Cliente"  Title="Nombre" Width="100px" />
        <RadzenDataGridColumn TItem="Models.Cliente"  Title="Direcci&oacute;n" Width="100px" />
        <RadzenDataGridColumn TItem=" Models.Cliente"  Title="Dni" Width="100px"/> 
        <RadzenDataGridColumn TItem=" Models.Cliente" Title="Telef&oacute;no" Width="100px"/>    

            <RadzenDataGridColumn TItem="Models.Cliente" Title="Pedidos" Width="100px" Filterable="false" >

                <Template Context="item">
                    <RadzenButton Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Dark" Icon="feed" class="rz-ripple"
                        Click="@(args => NavigationManager.NavigateTo($"Empleados/Ventas/ventasClientes/{item.Id}"))" />
                </Template>
             
                <Template Context="item">
                    <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="edit" class="rz-ripple"
                        Click="@(args => NavigationManager.NavigateTo($"Empleados/Ventas/ventasClientes/{item.Id}"))" />
                </Template>
             
                <Template Context="item">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" class="rz-ripple"
                        Click="@(args => NavigationManager.NavigateTo($"Empleados/Ventas/ventasClientes/{item.Id}"))" />
                </Template>

            </RadzenDataGridColumn>  
    </Columns>                 
</CListado> 
</ErrorBoundary>
<br>


@*Property="Pedidos" *@


<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
    <a href="/Empleados/Ventas/ClienteFormulario"> <RadzenButton  Click=@(() => EmployeeIDVisible = !EmployeeIDVisible) Text="Nuevo" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Secondary" /></a>
    <RadzenButton  Click=@(() => EmployeeIDVisible = !EmployeeIDVisible) Text="Modificar" Icon="check_circle" ButtonStyle="ButtonStyle.Success"  />
    <RadzenButton Click=@(() => EmployeeIDVisible = !EmployeeIDVisible) Text="Eliminar"  Icon="report" ButtonStyle="ButtonStyle.Danger" />
</RadzenStack>


@code {
    IEnumerable<Models.Cliente> clientes;   
         bool EmployeeIDVisible = false;
    protected bool cargando = true;
    [Parameter] public bool SoloLectura { get; set; } = true;
    [Parameter] public string Nombre {get; set;}
    [Parameter] public string Direccion {get; set;}
    [Parameter] public int Dni {get; set;} 
    [Parameter] public int Telefono {get; set;}  

 
   /* protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        //customers = dbContext.Customers.ToList();
       // orders = dbContext.Orders.ToList();
        //orderDetails = dbContext.OrderDetails.Include("Product").ToList();
    }*/
    private void OnClick(string text)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Button Clicked", Detail = text });
    }


    private ClienteDBContext db = new ClienteDBContext();
     public class ClientesController : Controller{
        private ClienteDBContext db = new ClienteDBContext();

        // GET: /Clientes/
            public ActionResult Cliente(string searchString) {
                var clientes = from m in db.Clientes 
                    select m;


                Cliente cliente = db.Clientes.Find(id);
                if (!String.IsNullOrEmpty(searchString)){ 
                    clientes = clientes.Where(s => s.Title.Contains(searchString)); 
                } 
                return View(clientes);
            }
        }
 
}

